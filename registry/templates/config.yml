# All other flavors inherit the `common' config snippet
common: &common
    # Default log level is info
    loglevel: _env:LOGLEVEL:info
    # By default, the registry acts standalone (eg: doesn't query the index)
    standalone: _env:STANDALONE:true
    # The default endpoint to use (if NOT standalone) is index.docker.io
    index_endpoint: _env:INDEX_ENDPOINT:https://index.docker.io
    # Storage redirect is disabled
    storage_redirect: _env:STORAGE_REDIRECT
    # Token auth is enabled (if NOT standalone)
    disable_token_auth: _env:DISABLE_TOKEN_AUTH
    # No priv key
    privileged_key: _env:PRIVILEGED_KEY
    # No search backend
    search_backend: _env:SEARCH_BACKEND
    # SQLite search backend
    sqlalchemy_index_database: _env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db

    # Mirroring is not enabled
    mirroring:
        source: _env:MIRROR_SOURCE # https://registry-1.docker.io
        source_index: _env:MIRROR_SOURCE_INDEX # https://index.docker.io
        tags_cache_ttl: _env:MIRROR_TAGS_CACHE_TTL:172800 # seconds

    cache:
        host: {{ or (.deis_cache_host) "" }}
        port: {{ or (.deis_cache_port) "" }}
        password: _env:CACHE_REDIS_PASSWORD
        db: 1

    # Enabling LRU cache for small files
    # This speeds up read/write on small files
    # when using a remote storage backend (like S3).
    # cache_lru:
    #     host: _env:CACHE_LRU_REDIS_HOST:localhost
    #     port: _env:CACHE_LRU_REDIS_PORT:6379
    #     db: 0
    #     password: _env:CACHE_LRU_REDIS_PASSWORD

    # Enabling these options makes the Registry send an email on each code Exception
    {{ if .deis_registry_smtpHost }}
    email_exceptions:
        smtp_host: {{ or (.deis_registry_smtpHost) "" }}
        smtp_port: {{ or (.deis_registry_smtpPort) "25" }}
        smtp_login: {{ or (.deis_registry_smtpLogin) "" }}
        smtp_password: {{ or (.deis_registry_smtpPassword) "" }}
        smtp_secure: bool({{ or (.deis_registry_smtpSecure) "false" }})
        from_addr: {{ or (.deis_registry_smtpFrom) "docker-registry@localdomain.local" }}
        to_addr: {{ or (.deis_registry_smtpTo) "noise+dockerregistry@localdomain.local" }}
    {{ end }}

    # Enable bugsnag (set the API key)
    bugsnag: _env:BUGSNAG

local: &local
    <<: *common
    storage: local
    storage_path: /data


s3: &s3
    <<: *common
    storage: s3
    s3_region: {{ or (.deis_registry_s3region) "" }}
    s3_bucket: {{ or (.deis_registry_s3bucket) "" }}
    boto_bucket: {{ or (.deis_registry_s3bucket) "" }}
    storage_path: {{ or (.deis_registry_s3path) "/registry" }}
    s3_encrypt: bool({{ or (.deis_registry_s3encrypt) "true" }})
    s3_secure: bool({{ or (.deis_registry_s3secure) "true" }})
    s3_access_key: {{ or (.deis_registry_s3accessKey) "" }}
    s3_secret_key: {{ or (.deis_registry_s3secretKey) "" }}

# Google Cloud Storage Configuration
# See:
# https://developers.google.com/storage/docs/reference/v1/getting-startedv1#keys
# for details on access and secret keys.
gcs:
    <<: *common
    storage: gcs
    boto_bucket: _env:GCS_BUCKET
    storage_path: _env:STORAGE_PATH:/registry
    gs_secure: _env:GCS_SECURE:true
    gs_access_key: _env:GCS_KEY
    gs_secret_key: _env:GCS_SECRET
    # OAuth 2.0 authentication with the storage.
    # oauth2 can be set to true or false. If it is set to true, gs_access_key,
    # gs_secret_key and gs_secure are not needed.
    # Client ID and Client Secret must be set into OAUTH2_CLIENT_ID and
    # OAUTH2_CLIENT_SECRET environment variables.
    # See: https://developers.google.com/accounts/docs/OAuth2.
    oauth2: _env:GCS_OAUTH2:false

# This flavor is for storing images in Openstack Swift
swift: &swift
    <<: *common
    storage: swift
    storage_path: _env:STORAGE_PATH:/registry
    # keystone authorization
    swift_authurl: {{ or (.deis_registry_swiftAuthURL) "" }}
    swift_container: {{ or (.deis_registry_swiftContainer) "" }}
    swift_user: {{ or (.deis_registry_swiftUser) "" }}
    swift_password: {{ or (.deis_registry_swiftPassword) "" }}
    swift_tenant_name: {{ or (.deis_registry_swiftTenantName) "" }}
    swift_region_name: {{ or (.deis_registry_swiftRegionName) "" }}

# This flavor stores the images in Glance (to integrate with openstack)
# See also: https://github.com/dotcloud/openstack-docker
glance: &glance
    <<: *common
    storage: glance
    storage_alternate: _env:GLANCE_STORAGE_ALTERNATE:file
    storage_path: _env:STORAGE_PATH:/tmp/registry

openstack:
    <<: *glance

# This flavor stores the images in Glance (to integrate with openstack)
# and tags in Swift.
glance-swift: &glance-swift
    <<: *swift
    storage: glance
    storage_alternate: swift

openstack-swift:
    <<: *glance-swift

elliptics:
    <<: *common
    storage: elliptics
    elliptics_nodes: _env:ELLIPTICS_NODES
    elliptics_wait_timeout: _env:ELLIPTICS_WAIT_TIMEOUT:60
    elliptics_check_timeout: _env:ELLIPTICS_CHECK_TIMEOUT:60
    elliptics_io_thread_num: _env:ELLIPTICS_IO_THREAD_NUM:2
    elliptics_net_thread_num: _env:ELLIPTICS_NET_THREAD_NUM:2
    elliptics_nonblocking_io_thread_num: _env:ELLIPTICS_NONBLOCKING_IO_THREAD_NUM:2
    elliptics_groups: _env:ELLIPTICS_GROUPS
    elliptics_verbosity: _env:ELLIPTICS_VERBOSITY:4
    elliptics_logfile: _env:ELLIPTICS_LOGFILE:/dev/stderr
    elliptics_addr_family: _env:ELLIPTICS_ADDR_FAMILY:2



# This is the default configuration when no flavor is specified
dev: &dev
    <<: *local
    loglevel: _env:LOGLEVEL:debug
    search_backend: _env:SEARCH_BACKEND:sqlalchemy

# This flavor is used by unit tests
test:
    <<: *dev
    index_endpoint: https://indexstaging-docker.dotcloud.com
    standalone: true
    storage_path: _env:STORAGE_PATH:./tmp/test

# To specify another flavor, set the environment variable SETTINGS_FLAVOR
# $ export SETTINGS_FLAVOR=prod
prod:
    <<: *s3
    storage_path: _env:STORAGE_PATH:/prod

# Flavor used by deis
deis:
    {{ if .deis_registry_s3accessKey }}<<: *s3
    {{ else if .deis_registry_swiftAuthURL }} <<: *openstack-swift
    {{ else }} <<: *local
    {{ end }}
